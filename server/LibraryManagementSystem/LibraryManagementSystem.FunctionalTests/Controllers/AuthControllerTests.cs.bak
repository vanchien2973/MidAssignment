using System.Net;
using FluentAssertions;
using LibraryManagementSystem.Domain.Entities;
using LibraryManagementSystem.FunctionalTests;
using NUnit.Framework;

namespace LibraryManagementSystem.FunctionalTests.Controllers;

[TestFixture]
public class AuthControllerTests : TestBase
{
    [SetUp]
    public async Task AuthSetup()
    {
        await SeedTestUserAsync();
    }
    
    private async Task SeedTestUserAsync()
    {
        // Thêm một người dùng thử nghiệm
        var testUser = new User
        {
            UserId = 1,
            Username = "testuser",
            Email = "testuser@example.com",
            Password = "AQAAAAIAAYagAAAAEOQPIBx45LmkFfKyRIkFx71pcG7sHvpwrNV6JR8oeVTTpMcK9q/KsDpXSJtcawtb8A==", // "Test@123"
            FullName = "Test User",
            IsActive = true,
            UserType = Domain.Enums.UserType.NormalUser,
            CreatedDate = DateTime.UtcNow
        };
        
        var adminUser = new User
        {
            UserId = 2,
            Username = "adminuser",
            Email = "admin@example.com",
            Password = "AQAAAAIAAYagAAAAEOQPIBx45LmkFfKyRIkFx71pcG7sHvpwrNV6JR8oeVTTpMcK9q/KsDpXSJtcawtb8A==", // "Test@123"
            FullName = "Admin User",
            IsActive = true,
            UserType = Domain.Enums.UserType.SuperUser,
            CreatedDate = DateTime.UtcNow
        };
        
        DbContext.Users.Add(testUser);
        DbContext.Users.Add(adminUser);
        await DbContext.SaveChangesAsync();
    }
    
    [Test]
    public async Task Login_WithValidCredentials_ReturnsSuccessAndToken()
    {
        // Arrange
        var loginData = new
        {
            Username = "testuser",
            Password = "Test@123"
        };
        
        // Act
        var response = await Client.PostAsync("/api/auth/login", CreateJsonContent(loginData));
        var responseContent = await DeserializeResponse<AuthResponseDto>(response);
        
        // Assert
        response.StatusCode.Should().Be(HttpStatusCode.OK);
        responseContent.Should().NotBeNull();
        responseContent!.Success.Should().BeTrue();
        responseContent.Token.Should().NotBeNullOrEmpty();
        responseContent.RefreshToken.Should().NotBeNullOrEmpty();
    }
    
    [Test]
    public async Task Login_WithInvalidCredentials_ReturnsUnauthorized()
    {
        // Arrange
        var loginData = new
        {
            Username = "testuser",
            Password = "WrongPassword"
        };
        
        // Act
        var response = await Client.PostAsync("/api/auth/login", CreateJsonContent(loginData));
        var responseContent = await DeserializeResponse<AuthResponseDto>(response);
        
        // Assert
        response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);
        responseContent.Should().NotBeNull();
        responseContent!.Success.Should().BeFalse();
    }
    
    [Test]
    public async Task Register_WithValidData_ReturnsSuccess()
    {
        // Arrange
        var registerData = new
        {
            Username = "newuser",
            Email = "newuser@example.com",
            Password = "NewUser@123",
            ConfirmPassword = "NewUser@123",
            FullName = "New User"
        };
        
        // Act
        var response = await Client.PostAsync("/api/auth/register", CreateJsonContent(registerData));
        var responseContent = await DeserializeResponse<AuthResponseDto>(response);
        
        // Assert
        response.StatusCode.Should().Be(HttpStatusCode.OK);
        responseContent.Should().NotBeNull();
        responseContent!.Success.Should().BeTrue();
    }
    
    [Test]
    public async Task Register_WithExistingUsername_ReturnsBadRequest()
    {
        // Arrange
        var registerData = new
        {
            Username = "testuser", // Đã tồn tại
            Email = "another@example.com",
            Password = "Test@123",
            ConfirmPassword = "Test@123",
            FullName = "Another User"
        };
        
        // Act
        var response = await Client.PostAsync("/api/auth/register", CreateJsonContent(registerData));
        var responseContent = await DeserializeResponse<AuthResponseDto>(response);
        
        // Assert
        response.StatusCode.Should().Be(HttpStatusCode.BadRequest);
        responseContent.Should().NotBeNull();
        responseContent!.Success.Should().BeFalse();
    }
    
    [Test]
    public async Task GetCurrentUser_WithValidToken_ReturnsUserInfo()
    {
        // Arrange
        var token = await GetAuthTokenAsync("testuser", "Test@123");
        SetAuthToken(token);
        
        // Act
        var response = await Client.GetAsync("/api/auth/me");
        var responseContent = await DeserializeResponse<CurrentUserDto>(response);
        
        // Assert
        response.StatusCode.Should().Be(HttpStatusCode.OK);
        responseContent.Should().NotBeNull();
        responseContent!.Success.Should().BeTrue();
        responseContent.UserId.Should().Be(1);
        responseContent.Username.Should().Be("testuser");
    }
    
    [Test]
    public async Task GetCurrentUser_WithoutToken_ReturnsUnauthorized()
    {
        // Arrange - không set token
        
        // Act
        var response = await Client.GetAsync("/api/auth/me");
        
        // Assert
        response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);
    }
    
    #region DTOs for Testing
    private class AuthResponseDto
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public string Token { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
    }
    
    private class CurrentUserDto
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public int UserId { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public string UserType { get; set; } = string.Empty;
    }
    #endregion
} 